{"version":3,"sources":["../../src/core/define-plugin.ts","../../src/core/define-all-hooks-plugin.ts"],"sourcesContent":["import type { Plugin, PluginHooksConstraint } from \"./types.js\";\n\n/**\n * Allows defining a type-safe plugin that can be used in {defineIntegration}.\n *\n * @param {object} plugin\n * @param {string} plugin.name - The name of the plugin, as you want it to be called from the hook\n * @param {string} plugin.hook - The name of the hook where this plugin should be available\n * @param {Function} plugin.implementation - The actual function definition. Refer to docs for usage\n *\n * @see https://astro-integration-kit.netlify.app/utilities/define-plugin/\n *\n * ```ts\n * import { definePlugin } from \"../core/define-plugin.js\";\n * import { addVitePlugin } from \"../utilities/add-vite-plugin.js\";\n * import type { Plugin as VitePlugin } from \"vite\"\n *\n * export const addVitePluginPlugin = definePlugin({\n * \t\tname: \"addVitePlugin\",\n * \t\thook: \"astro:config:setup\",\n * \t\timplementation: ({ updateConfig }) => (plugin: VitePlugin) => addVitePlugin({ plugin, updateConfig }),\n * });\n * ```\n */\nexport const definePlugin = <\n\tTName extends string,\n\tTHooks extends PluginHooksConstraint,\n>(\n\tplugin: Plugin<TName, THooks>,\n) => plugin;\n","import { definePlugin } from \"./define-plugin.js\";\r\nimport type { Hooks, Plugin } from \"./types.js\";\r\n\r\nexport type AllHooksPluginDefinition<TName extends string, TApi extends Record<string, unknown>> = {\r\n  name: TName;\r\n  setup: (...params: Parameters<AllHooksPlugin<TName, TApi>['setup']>) =>\r\n    <H extends keyof Hooks>(hookName: H) =>\r\n      (...hookParams: Parameters<Hooks[H]>) => TApi;\r\n};\r\n\r\n/**\r\n * A plugin that exposes the same API for all hooks.\r\n */\r\nexport type AllHooksPlugin<TName extends string, TApi extends Record<string, unknown>> = Plugin<\r\n  TName,\r\n  Record<keyof Hooks, TApi>\r\n>;\r\n\r\n/**\r\n * Allows defining a type-safe plugin that can be used from any Astro hook.\r\n *\r\n * This wraps {@link definePlugin} and receives a factory for the API to be\r\n * called dynamically for each hook. This allows plugins to support any hook\r\n * even those added by new versions of astro or hooks added by other integrations.\r\n *\r\n * @see https://astro-integration-kit.netlify.app/utilities/define-plugin/\r\n */\r\nexport const defineAllHooksPlugin = <TName extends string, TApi extends Record<string, unknown>>(\r\n  plugin: AllHooksPluginDefinition<TName, TApi>\r\n): AllHooksPlugin<TName, TApi> =>\r\n  definePlugin({\r\n    ...plugin,\r\n    setup: (...params) => {\r\n      const hookFactory = plugin.setup(...params);\r\n\r\n      return new Proxy(Object.freeze({}) as ReturnType<Plugin<any, any>['setup']>, {\r\n        has: (_, prop) => typeof prop === 'string',\r\n        get: (_, prop) => hookFactory(prop as keyof Hooks),\r\n      });\r\n    },\r\n  });\r\n"],"mappings":"AAwBO,IAAMA,EAIZC,GACIA,ECFE,IAAMC,EACXC,GAEAC,EAAa,CACX,GAAGD,EACH,MAAO,IAAIE,IAAW,CACpB,IAAMC,EAAcH,EAAO,MAAM,GAAGE,CAAM,EAE1C,OAAO,IAAI,MAAM,OAAO,OAAO,CAAC,CAAC,EAA4C,CAC3E,IAAK,CAACE,EAAGC,IAAS,OAAOA,GAAS,SAClC,IAAK,CAACD,EAAGC,IAASF,EAAYE,CAAmB,CACnD,CAAC,CACH,CACF,CAAC","names":["definePlugin","plugin","defineAllHooksPlugin","plugin","definePlugin","params","hookFactory","_","prop"]}
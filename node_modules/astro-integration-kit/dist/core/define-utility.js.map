{"version":3,"sources":["../../src/core/define-utility.ts"],"sourcesContent":["import type { HookParameters } from \"astro\";\r\nimport type { Hooks } from \"./types.js\";\r\n\r\n/**\r\n * A utility to be used on an Astro hook.\r\n *\r\n * @see defineUtility\r\n */\r\nexport type HookUtility<\r\n\tTHook extends keyof Hooks,\r\n\tTArgs extends Array<any>,\r\n\tTReturn,\r\n> = (params: HookParameters<THook>, ...args: TArgs) => TReturn;\r\n\r\n/**\r\n * Allows defining a type-safe function requiring all the params of a given hook.\r\n * It uses currying to make TypeScript happy.\r\n *\r\n * @param {string} _hook\r\n *\r\n * @see https://astro-integration-kit.netlify.app/utilities/define-utility/\r\n *\r\n * @example\r\n * ```ts\r\n * const test = defineUtility(\"astro:config:setup\")((params, foo: boolean) => {\r\n *  return \"bar\";\r\n * });\r\n * ```\r\n */\r\nexport const defineUtility =\r\n\t<THook extends keyof Hooks>(_hook: THook) =>\r\n\t/**\r\n\t * The function itself\r\n\t * @param {Function} fn;\r\n\t */\r\n\t<TArgs extends Array<any>, T>(\r\n\t\tfn: HookUtility<THook, TArgs, T>,\r\n\t): HookUtility<THook, TArgs, T> =>\r\n\t\tfn;\r\n"],"mappings":"AA6BO,IAAMA,EACgBC,GAM3BC,GAEAA","names":["defineUtility","_hook","fn"]}
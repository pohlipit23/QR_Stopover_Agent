{"version":3,"sources":["../../src/utilities/add-dts.ts","../../src/core/define-utility.ts"],"sourcesContent":["import { mkdirSync, readFileSync, writeFileSync } from \"node:fs\";\r\nimport { dirname, relative } from \"node:path\";\r\nimport { fileURLToPath } from \"node:url\";\r\nimport type { AstroIntegrationLogger } from \"astro\";\r\nimport { parse, prettyPrint } from \"recast\";\r\nimport typescriptParser from \"recast/parsers/typescript.js\";\r\nimport { defineUtility } from \"../core/define-utility.js\";\r\n\r\nconst injectEnvDTS = ({\r\n\tsrcDir,\r\n\tlogger,\r\n\tspecifier,\r\n}: {\r\n\tsrcDir: URL;\r\n\tlogger: AstroIntegrationLogger;\r\n\tspecifier: URL | string;\r\n}) => {\r\n\tconst envDTsPath = fileURLToPath(new URL(\"env.d.ts\", srcDir));\r\n\r\n\tif (specifier instanceof URL) {\r\n\t\tspecifier = fileURLToPath(specifier);\r\n\t\tspecifier = relative(fileURLToPath(srcDir), specifier);\r\n\t\tspecifier = specifier.replaceAll(\"\\\\\", \"/\");\r\n\t}\r\n\r\n\tconst envDTsContents = readFileSync(envDTsPath, \"utf8\");\r\n\r\n\tif (\r\n\t\tenvDTsContents.includes(`/// <reference types='${specifier}' />`) ||\r\n\t\tenvDTsContents.includes(`/// <reference types=\"${specifier}\" />`)\r\n\t) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst data: { singleQuotes: boolean; hasClient: boolean } =\r\n\t\tenvDTsContents.includes(`/// <reference types='astro/client' />`)\r\n\t\t\t? {\r\n\t\t\t\t\tsingleQuotes: true,\r\n\t\t\t\t\thasClient: true,\r\n\t\t\t\t}\r\n\t\t\t: envDTsContents.includes(`/// <reference types=\"astro/client\" />`)\r\n\t\t\t\t? { singleQuotes: false, hasClient: true }\r\n\t\t\t\t: envDTsContents.includes(\r\n\t\t\t\t\t\t\t`/// <reference path=\"../.astro/types.d.ts\" />`,\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t? {\r\n\t\t\t\t\t\t\tsingleQuotes: false,\r\n\t\t\t\t\t\t\thasClient: false,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t: {\r\n\t\t\t\t\t\t\tsingleQuotes: true,\r\n\t\t\t\t\t\t\thasClient: false,\r\n\t\t\t\t\t\t};\r\n\r\n\tconst referenceToReplace = `/// <reference ${\r\n\t\tdata.hasClient ? \"types\" : \"path\"\r\n\t}=${data.singleQuotes ? `'` : `\"`}${\r\n\t\tdata.hasClient ? \"astro/client\" : \"../.astro/types.d.ts\"\r\n\t}${data.singleQuotes ? `'` : `\"`} />`;\r\n\r\n\tconst newEnvDTsContents = envDTsContents.replace(\r\n\t\treferenceToReplace,\r\n\t\t`${referenceToReplace}\\n/// <reference types=${\r\n\t\t\tdata.singleQuotes ? `'` : `\"`\r\n\t\t}${specifier}${data.singleQuotes ? `'` : `\"`} />`,\r\n\t);\r\n\r\n\t// the odd case where the user changed the reference to astro/client\r\n\tif (newEnvDTsContents === envDTsContents) {\r\n\t\treturn;\r\n\t}\r\n\r\n\twriteFileSync(envDTsPath, newEnvDTsContents);\r\n\tlogger.info(\"Updated env.d.ts types\");\r\n};\r\n\r\n/**\r\n * @deprecated\r\n * This utility will be removed in a future minor release. Bump your Astro peer dependency to ^4.14.0\r\n * and use [injectTypes](https://docs.astro.build/en/reference/integrations-reference/#injecttypes-options).\r\n *\r\n * @description\r\n * Allows to inject .d.ts file in users project. It will create a file inside `.astro`\r\n * and reference it from `src/env.d.ts`.\r\n *\r\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">} params\r\n * @param {object} options\r\n * @param {string} options.name - The name of the .d.ts file. Eg `test` will generate `.astro/test.d.ts`\r\n * @param {string} options.content\r\n *\r\n * @example\r\n * ```ts\r\n * addDts(params, {\r\n * \t\tname: \"my-integration\",\r\n * \t \tcontent: `declare module \"virtual:my-integration\" {}`,\r\n * })\r\n * ```\r\n *\r\n * @see https://astro-integration-kit.netlify.app/utilities/add-dts/\r\n */\r\nexport const addDts = defineUtility(\"astro:config:setup\")(\r\n\t(\r\n\t\t{ config: { root, srcDir }, logger },\r\n\t\t{\r\n\t\t\tname,\r\n\t\t\tcontent,\r\n\t\t}: {\r\n\t\t\tname: string;\r\n\t\t\tcontent: string;\r\n\t\t},\r\n\t) => {\r\n\t\tconst dtsURL = new URL(`.astro/${name}.d.ts`, root);\r\n\t\tconst filePath = fileURLToPath(dtsURL);\r\n\r\n\t\tinjectEnvDTS({\r\n\t\t\tsrcDir,\r\n\t\t\tlogger,\r\n\t\t\tspecifier: dtsURL,\r\n\t\t});\r\n\r\n\t\tmkdirSync(dirname(filePath), { recursive: true });\r\n\t\twriteFileSync(\r\n\t\t\tfilePath,\r\n\t\t\t// TODO: extract to helper to use with core injectTypes\r\n\t\t\tprettyPrint(\r\n\t\t\t\tparse(content, {\r\n\t\t\t\t\tparser: typescriptParser,\r\n\t\t\t\t}),\r\n\t\t\t\t{ tabWidth: 4 },\r\n\t\t\t).code,\r\n\t\t\t\"utf-8\",\r\n\t\t);\r\n\t},\r\n);\r\n","import type { HookParameters } from \"astro\";\r\nimport type { Hooks } from \"./types.js\";\r\n\r\n/**\r\n * A utility to be used on an Astro hook.\r\n *\r\n * @see defineUtility\r\n */\r\nexport type HookUtility<\r\n\tTHook extends keyof Hooks,\r\n\tTArgs extends Array<any>,\r\n\tTReturn,\r\n> = (params: HookParameters<THook>, ...args: TArgs) => TReturn;\r\n\r\n/**\r\n * Allows defining a type-safe function requiring all the params of a given hook.\r\n * It uses currying to make TypeScript happy.\r\n *\r\n * @param {string} _hook\r\n *\r\n * @see https://astro-integration-kit.netlify.app/utilities/define-utility/\r\n *\r\n * @example\r\n * ```ts\r\n * const test = defineUtility(\"astro:config:setup\")((params, foo: boolean) => {\r\n *  return \"bar\";\r\n * });\r\n * ```\r\n */\r\nexport const defineUtility =\r\n\t<THook extends keyof Hooks>(_hook: THook) =>\r\n\t/**\r\n\t * The function itself\r\n\t * @param {Function} fn;\r\n\t */\r\n\t<TArgs extends Array<any>, T>(\r\n\t\tfn: HookUtility<THook, TArgs, T>,\r\n\t): HookUtility<THook, TArgs, T> =>\r\n\t\tfn;\r\n"],"mappings":"AAAA,OAAS,aAAAA,EAAW,gBAAAC,EAAc,iBAAAC,MAAqB,UACvD,OAAS,WAAAC,EAAS,YAAAC,MAAgB,YAClC,OAAS,iBAAAC,MAAqB,WAE9B,OAAS,SAAAC,EAAO,eAAAC,MAAmB,SACnC,OAAOC,MAAsB,+BCwBtB,IAAMC,EACgBC,GAM3BC,GAEAA,ED9BF,IAAMC,EAAe,CAAC,CACrB,OAAAC,EACA,OAAAC,EACA,UAAAC,CACD,IAIM,CACL,IAAMC,EAAaC,EAAc,IAAI,IAAI,WAAYJ,CAAM,CAAC,EAExDE,aAAqB,MACxBA,EAAYE,EAAcF,CAAS,EACnCA,EAAYG,EAASD,EAAcJ,CAAM,EAAGE,CAAS,EACrDA,EAAYA,EAAU,WAAW,KAAM,GAAG,GAG3C,IAAMI,EAAiBC,EAAaJ,EAAY,MAAM,EAEtD,GACCG,EAAe,SAAS,yBAAyBJ,CAAS,MAAM,GAChEI,EAAe,SAAS,yBAAyBJ,CAAS,MAAM,EAEhE,OAGD,IAAMM,EACLF,EAAe,SAAS,wCAAwC,EAC7D,CACA,aAAc,GACd,UAAW,EACZ,EACCA,EAAe,SAAS,wCAAwC,EAC/D,CAAE,aAAc,GAAO,UAAW,EAAK,EACvCA,EAAe,SACd,+CACD,EACC,CACA,aAAc,GACd,UAAW,EACZ,EACC,CACA,aAAc,GACd,UAAW,EACZ,EAECG,EAAqB,kBAC1BD,EAAK,UAAY,QAAU,MAC5B,IAAIA,EAAK,aAAe,IAAM,GAAG,GAChCA,EAAK,UAAY,eAAiB,sBACnC,GAAGA,EAAK,aAAe,IAAM,GAAG,MAE1BE,EAAoBJ,EAAe,QACxCG,EACA,GAAGA,CAAkB;AAAA,uBACpBD,EAAK,aAAe,IAAM,GAC3B,GAAGN,CAAS,GAAGM,EAAK,aAAe,IAAM,GAAG,KAC7C,EAGIE,IAAsBJ,IAI1BK,EAAcR,EAAYO,CAAiB,EAC3CT,EAAO,KAAK,wBAAwB,EACrC,EA0BaW,EAASC,EAAc,oBAAoB,EACvD,CACC,CAAE,OAAQ,CAAE,KAAAC,EAAM,OAAAd,CAAO,EAAG,OAAAC,CAAO,EACnC,CACC,KAAAc,EACA,QAAAC,CACD,IAII,CACJ,IAAMC,EAAS,IAAI,IAAI,UAAUF,CAAI,QAASD,CAAI,EAC5CI,EAAWd,EAAca,CAAM,EAErClB,EAAa,CACZ,OAAAC,EACA,OAAAC,EACA,UAAWgB,CACZ,CAAC,EAEDE,EAAUC,EAAQF,CAAQ,EAAG,CAAE,UAAW,EAAK,CAAC,EAChDP,EACCO,EAEAG,EACCC,EAAMN,EAAS,CACd,OAAQO,CACT,CAAC,EACD,CAAE,SAAU,CAAE,CACf,EAAE,KACF,OACD,CACD,CACD","names":["mkdirSync","readFileSync","writeFileSync","dirname","relative","fileURLToPath","parse","prettyPrint","typescriptParser","defineUtility","_hook","fn","injectEnvDTS","srcDir","logger","specifier","envDTsPath","fileURLToPath","relative","envDTsContents","readFileSync","data","referenceToReplace","newEnvDTsContents","writeFileSync","addDts","defineUtility","root","name","content","dtsURL","filePath","mkdirSync","dirname","prettyPrint","parse","typescriptParser"]}
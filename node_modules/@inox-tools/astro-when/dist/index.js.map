{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;AAIA,IAAM,KAAA,GAAQ,OAAO,uBAAuB,CAAA,CAAA;AAE5C,IAAM,iBAAoB,GAAA,gBAAA,CAAA;AAC1B,IAAM,kBAAA,GAAqB,KAAO,iBAAiB,CAAA,CAAA,CAAA;AAGnD,IAAM,GAAA,GAAM,MAAO,CAAA,GAAA,CAAI,yBAAyB,CAAA,CAAA;AAEhD,IAAO,cAAQ,iBAAkB,CAAA;AAAA,EAChC,IAAM,EAAA,wBAAA;AAAA,EACN,aAAe,EAAA,CAAA,CAAE,KAAM,EAAA,CAAE,QAAS,EAAA;AAAA,EAClC,OAAO,OAAO;AAAA,IACb,KAAO,EAAA;AAAA,MACN,oBAAA,EAAsB,CAAC,MAAW,KAAA;AACjC,QAAM,MAAA,UAAA,GAAa,OAAO,MAAO,CAAA,MAAA,CAAA;AACjC,QAAA,MAAM,UAAU,MAAO,CAAA,OAAA,CAAA;AAEvB,QAAC,UAAA,CAAmB,GAAG,CAAA,GAAI,OAAY,KAAA,OAAA,CAAA;AAEvC,QAAA,KAAA,CAAM,oBAAoB,CAAA,CAAA;AAC1B,QAAA,aAAA,CAAc,MAAQ,EAAA;AAAA,UACrB,MAAQ,EAAA;AAAA,YACP,IAAM,EAAA,wBAAA;AAAA,YACN,UAAU,EAAI,EAAA;AACb,cAAA,IAAI,OAAO,iBAAmB,EAAA;AAC7B,gBAAA,KAAA,CAAM,6BAA6B,CAAA,CAAA;AACnC,gBAAO,OAAA,kBAAA,CAAA;AAAA,eACR;AAAA,aACD;AAAA,YACA,IAAA,CAAK,IAAI,OAAS,EAAA;AACjB,cAAA,IAAI,OAAO,kBAAoB,EAAA,OAAA;AAE/B,cAAA,MAAM,QAAW,GAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAA,CAAA,CAAA;AAUjB,cAAI,IAAA,OAAA,EAAS,QAAQ,IAAM,EAAA;AAC1B,gBAAA,KAAA,CAAM,8BAA8B,CAAA,CAAA;AACpC,gBAAA,OAAO,GAAG,QAAQ,CAAA,oCAAA,CAAA,CAAA;AAAA,eACnB;AAEA,cAAA,IAAI,YAAY,KAAO,EAAA;AACtB,gBAAA,KAAA,CAAM,kCAAkC,CAAA,CAAA;AACxC,gBAAA,OAAO,GAAG,QAAQ,CAAA,uCAAA,CAAA,CAAA;AAAA,eACnB;AAEA,cAAA,IAAI,eAAe,QAAU,EAAA;AAC5B,gBAAA,KAAA,CAAM,oCAAoC,CAAA,CAAA;AAC1C,gBAAA,OAAO,GAAG,QAAQ,CAAA,yCAAA,CAAA,CAAA;AAAA,eACnB;AAEA,cAAA,KAAA,CAAM,mCAAmC,CAAA,CAAA;AACzC,cAAA,OAAO,GAAG,QAAQ,CAAA;AAAA;AAAA;AAAA,YAAA,CAAA,CAAA;AAAA,aAInB;AAAA,WACD;AAAA,SACA,CAAA,CAAA;AAAA,OACF;AAAA,MACA,mBAAA,EAAqB,CAAC,MAAW,KAAA;AAEhC,QAAI,IAAA,OAAO,MAAO,CAAA,WAAA,KAAgB,UAAY,EAAA;AAC7C,UAAA,KAAA,CAAM,qCAAqC,CAAA,CAAA;AAC3C,UAAA,MAAA,CAAO,WAAY,CAAA;AAAA,YAClB,QAAU,EAAA,YAAA;AAAA,YACV,OAAS,EAAA,kCAAA;AAAA,WACT,CAAA,CAAA;AAAA,SACF;AAAA,OACD;AAAA,MACA,oBAAoB,MAAM;AACzB,QAAA,OAAQ,WAAmB,GAAG,CAAA,CAAA;AAAA,OAC/B;AAAA,KACD;AAAA,GACD,CAAA;AACD,CAAC","file":"index.js","sourcesContent":["import { defineIntegration, addVitePlugin } from 'astro-integration-kit';\nimport { z } from 'astro/zod';\nimport debugC from 'debug';\n\nconst debug = debugC('inox-tools:astro-when');\n\nconst VIRTUAL_MODULE_ID = '@it-astro:when';\nconst RESOLVED_MODULE_ID = `\\x00${VIRTUAL_MODULE_ID}`;\n\n// Globally indicate to the virtual module that it is in the same context as the build system.\nconst key = Symbol.for('astro:when/buildContext');\n\nexport default defineIntegration({\n\tname: '@inox-tools/astro-when',\n\toptionsSchema: z.never().optional(),\n\tsetup: () => ({\n\t\thooks: {\n\t\t\t'astro:config:setup': (params) => {\n\t\t\t\tconst outputMode = params.config.output;\n\t\t\t\tconst command = params.command;\n\n\t\t\t\t(globalThis as any)[key] = command === 'build';\n\n\t\t\t\tdebug('Adding Vite plugin');\n\t\t\t\taddVitePlugin(params, {\n\t\t\t\t\tplugin: {\n\t\t\t\t\t\tname: '@inox-tools/astro-when',\n\t\t\t\t\t\tresolveId(id) {\n\t\t\t\t\t\t\tif (id === VIRTUAL_MODULE_ID) {\n\t\t\t\t\t\t\t\tdebug('Resolving virtual module ID');\n\t\t\t\t\t\t\t\treturn RESOLVED_MODULE_ID;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tload(id, options) {\n\t\t\t\t\t\t\tif (id !== RESOLVED_MODULE_ID) return;\n\n\t\t\t\t\t\t\tconst preamble = `\n              \texport const When = {\n                \tClient: 'client',\n                \tServer: 'server',\n                \tPrerender: 'prerender',\n                \tStaticBuild: 'staticBuild',\n                \tDevServer: 'devServer',\n              \t};\n            \t`;\n\n\t\t\t\t\t\t\tif (options?.ssr !== true) {\n\t\t\t\t\t\t\t\tdebug('Generating module for client');\n\t\t\t\t\t\t\t\treturn `${preamble} export const whenAmI = When.Client;`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (command === 'dev') {\n\t\t\t\t\t\t\t\tdebug('Generating module for dev server');\n\t\t\t\t\t\t\t\treturn `${preamble} export const whenAmI = When.DevServer;`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (outputMode === 'static') {\n\t\t\t\t\t\t\t\tdebug('Generating module for static build');\n\t\t\t\t\t\t\t\treturn `${preamble} export const whenAmI = When.StaticBuild;`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdebug('Generating module for live server');\n\t\t\t\t\t\t\treturn `${preamble}\n              const isBuildContext = Symbol.for('astro:when/buildContext');\n              export const whenAmI = globalThis[isBuildContext] ? When.Prerender : When.Server;\n            `;\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t},\n\t\t\t'astro:config:done': (params) => {\n\t\t\t\t// Check if the version of Astro being used has the `injectTypes` utility.\n\t\t\t\tif (typeof params.injectTypes === 'function') {\n\t\t\t\t\tdebug('Injecting types in .astro structure');\n\t\t\t\t\tparams.injectTypes({\n\t\t\t\t\t\tfilename: 'types.d.ts',\n\t\t\t\t\t\tcontent: \"import '@inox-tools/astro-when';\",\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\t'astro:build:done': () => {\n\t\t\t\tdelete (globalThis as any)[key];\n\t\t\t},\n\t\t},\n\t}),\n});\n"]}